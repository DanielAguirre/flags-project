{"version":3,"sources":["Country.js","Wrapper.js","CountryList.js","FilterRegion.js","Input.js","SearchCountry.js","ActionList.js","Header.js","CountrySelected.js","CountryPage.js","App.js","reducer.js","serviceWorker.js","index.js"],"names":["CountryStyled","styled","div","Country","flag","name","population","region","capital","alpha2Code","nativeName","history","useHistory","onClick","push","slugify","lower","loading","src","alt","className","WrapperStyled","Wrapper","children","CountryListStyled","CountryList","dispatch","useDispatch","countryList","useSelector","state","countryListByRegion","length","countryListByName","useEffect","fetch","then","res","json","list","type","payload","catch","err","console","log","map","key","FilterRegionStyled","select","FilterRegion","onChange","event","target","value","InputStyled","label","Input","props","SearchCountryStyled","SearchCountry","useState","inputValue","setInputValue","placeholder","ActionListStyled","ActionList","HeaderStyled","Header","setDarkMode","darkMode","to","CountrySelectedStyled","CountrySelected","subregion","topLevelDomain","currencies","languages","borders","item","id","CountryPageStyled","CountryPage","match","dbCountry","find","toLowerCase","params","country","setCountry","data","goBack","store","createStore","action","filter","includes","App","setChecked","mainClass","changeMedia","mq","matches","window","matchMedia","addListener","removeListener","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3ea12798.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components';\nimport {\n    useHistory\n} from 'react-router-dom'\nimport slugify from 'slugify';\n\nconst CountryStyled = styled.div`\n    cursor: pointer;\n    text-align: left;\n    border-radius: 5px;\n    margin: 1em;\n    width: auto;\n    overflow: hidden;\n    box-shadow: 0 0 7px 2px rgba(0,0,0,.03);\n    &:hover .details {\n        border-radius: 0 0 5px 5px;\n        border: 1px solid var(--black);\n        border-top: none;\n    }\n    img {\n        width: 100%;\n        height: 160px;\n        object-fit: cover;\n        vertical-align: top;\n        border-radius: 5px 5px 0 0;\n    }\n    .details {\n        padding: 1.5em;\n        border: 1px solid transparent;\n        border-top: none;\n        transition : .3s border;\n        background: var(--white);\n    }\n    h2 {\n        margin: 0;\n        margin-bottom: 1rem;\n        font-size: 18px;\n        font-weight: 700px;\n    }\n    p {\n        font-size: .9em;\n        margin-bottom: .5em;\n    }\n`\n\n\nfunction Country({\n    flag,\n    name,\n    population,\n    region,\n    capital,\n    nativeName,\n    alpha2Code\n}) {\n    const history = useHistory()\n    function handleClick() {\n        history.push(`/country/${slugify(alpha2Code, { lower: true })}`)\n    }\n\n    return (\n        <CountryStyled onClick={handleClick}>\n            <img  loading=\"lazy\" src={flag} alt=\"\"/>\n            <div className=\"details\">\n                <h2>{name}</h2>\n                <p><strong>Population:</strong> {population}</p>\n                <p><strong>Region:</strong> {region}</p>\n                <p><strong>Capital:</strong> {capital}</p>\n            </div>\n        </CountryStyled>\n    )\n}\n\nexport default Country\n\n","import React from 'react'\nimport styled from 'styled-components';\n\nconst WrapperStyled = styled.div`\n    max-width: 1312px;\n    width: auto;\n    padding: 0 1rem;\n`;\n\nfunction Wrapper({children}) {\n    return (\n        <WrapperStyled>\n            {children}\n        </WrapperStyled>\n    )\n}\n\nexport default Wrapper\n","import React, {useEffect} from 'react'\nimport styled from 'styled-components';\nimport Country from './Country';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Wrapper from './Wrapper'\n\nconst CountryListStyled = styled.div`\n  display: grid;\n  grid-row-gap: 2.3em;\n  grid-auto-flow: columns;\n  grid-column-gap: 66px;\n  grid-template-columns: repeat(auto-fill, 270px);\n  background: var(--background);\n  justify-content: center;\n  padding: 3em 0;\n`;\n\nfunction CountryList() {\n    const dispatch = useDispatch()\n    const countryList = useSelector(state => {\n        if (state.countryListByRegion.length > 0 && state.countryListByName === 0) {\n            return state.countryListByRegion\n        }\n\n        if (state.countryListByName.length > 0 ) {\n            return state.countryListByName\n        }\n        \n        return state.countryList\n    })\n    useEffect(() => {\n        fetch('https://restcountries.eu/rest/v2/all')        \n        .then(res => res.json())\n        .then(list => {\n            dispatch({\n                type: 'SET_COUNTRY_LIST', \n                payload: list\n            });\n        })\n        .catch(err => console.log('error', err))\n\n    }, [dispatch]);\n\n    return (\n        <Wrapper>\n            <CountryListStyled>\n                {countryList.map(({flag, name, population, region, capital, nativeName, alpha2Code}) => {\n                    return (\n                        <Country\n                            key={name}\n                            flag={flag}\n                            name={name}\n                            population={population}\n                            region={region}\n                            capital={capital}\n                            nativeName={nativeName}\n                            alpha2Code={alpha2Code}\n                        />\n                    )\n                })}\n            </CountryListStyled>\n        </Wrapper>\n    )\n}\n\nexport default CountryList\n","import React from 'react'\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\n\nconst FilterRegionStyled = styled.select`\n    padding: 1.3em;\n    border: none;\n    outline: 0;\n    box-shadow: 0 2px 9px 0 rgba(0,0,0,.05);\n    background: var(--white);\n    color: var(--black);\n`;\n\nexport default function FilterRegion() {\n    const dispatch  =  useDispatch();\n    const handleOnchage = (event)  => {\n        console.log('event', event.target.value)\n        dispatch({\n            type: 'SET_COUNTRY_REGION',\n            payload: { region: event.target.value }\n        })\n    }\n    return (\n        <FilterRegionStyled onChange={handleOnchage}>\n            <option value=\"\">Filter By Region</option>\n            <option value=\"Africa\">Africa</option>\n            <option value=\"Americas\">Americas</option>\n            <option value=\"Asia\">Asia</option>\n            <option value=\"Europe\">Europe</option>\n            <option value=\"Oceania\">Oceania</option>\n        </FilterRegionStyled> \n    )\n}\n","import React from 'react'\nimport styled from 'styled-components';\n\nconst InputStyled = styled.label`\n    display: inline-flex;\n    background: var(--white);\n    align-items:center;\n    box-shadow: 0 2px 9px 0 rgba(0,0,0,.05);\n    padding: 0 2rem;\n    border-radius: 5px;\n    flex: 1;\n    i {\n        margin-right: 1em;\n        color: #C4C4C4;\n    }\n    input{\n        flex: 1;\n        width: 100%;\n        border-radius: 5px;\n        border: none;\n        height: 48px;\n        line-height: 48px;\n        padding: 0 2rem;\n        font-size: .7em;\n        outline: 0;\n        box-Shadow: 0 2px 9px 0 rgba(0,0,0,.05);\n        color: var(--black);\n        background: var(--white);\n        &::-webkit-input-placeholder {\n            color: #c4c4c4;\n        }\n    }\n`;\n\nfunction Input({...props}) {\n    return (\n        <InputStyled>\n            <i className=\"fas fa-search\"></i>\n            <input type=\"text\" {...props} />\n        </InputStyled>\n    )\n}\n\nexport default Input\n","import React, {useState} from 'react'\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport Input from './Input'\n\n\nconst SearchCountryStyled = styled.div`\n    display: flex;\n    position: relative;\n    .close {\n        position: absolute;\n        right: 1em;\n        top: 1rem;\n        border-radius: 50%;\n        border: none;\n        box-shadow: 0 2px 9px 0 rgba(0,0,0,.05);\n    }\n`;\n\nfunction SearchCountry() {\n    const [inputValue, setInputValue] = useState('')\n    const dispatch = useDispatch()\n    const handleOnchange=(event) => {\n        setInputValue(event.target.value)\n        dispatch({\n            type:'SET_COUNTRY_LIST_BY_NAME',\n            payload: {name: event.target.value}\n        })\n        \n    }\n\n    const clearInput=(event) => {\n        dispatch({\n            type:'SET_COUNTRY_LIST_BY_NAME',\n            payload: {name: ''}\n        })\n        setInputValue('')\n    }\n    return (\n        <SearchCountryStyled>\n            {inputValue && \n                <i className=\"fa fa-times close\" onClick={clearInput}/>\n            }\n            \n            <Input type=\"text\" value={inputValue} placeholder=\"Search for a Country...\" onChange={handleOnchange} />\n        </SearchCountryStyled>\n    )\n}\n\nexport default SearchCountry\n","import React from 'react'\nimport styled from 'styled-components';\nimport FilterRegion from './FilterRegion';\nimport Wrapper from './Wrapper'\nimport SearchCountry from './SearchCountry'\n\nconst ActionListStyled = styled.div`\n    .grid {\n        display: grid;\n        grid-template-columns: 1fr;\n        grid-row-gap: 20px;\n    }\n\n    @media screen and (min-width: 768px) {\n        .grid{\n            grid-template-columns: 480px 1fr 200px;\n        }\n    }\n`;\n\n\nfunction ActionList() {\n    return (\n        <ActionListStyled>\n            <Wrapper>\n                <div className=\"grid\">\n                    <SearchCountry />\n                    <span></span>\n                    <FilterRegion />\n                </div>\n            </Wrapper>\n            \n        </ActionListStyled>\n    )\n}\n\nexport default ActionList\n","import React from 'react'\nimport styled from 'styled-components';\nimport Wrapper from './Wrapper'\nimport {Link} from 'react-router-dom'\n\nconst HeaderStyled = styled.div`\n    background: var(--white);\n    margin-bottom: 1em;\n    box-shadow: 0 2px 4px 0 rgna(0,0,0,.05);\n    .content {\n        height: 80px;\n        display: flex;\n        align-content: center;\n        justify-content: space-between;\n    }\n    h1{\n        font-size: 14px;\n    }\n    a {\n        text-decoration: none;\n        color: var(--dark);\n    }\n    .dark-mode {\n        cursor: pointer;\n        .moon {\n            transform: rotate(-25deg);\n            display: inline-flex;\n            margin-right: 10px;\n        }\n        p {\n            font-size: 12px;\n            font-weight: 600;\n        }\n    }\n\n    @media screen and (min-width: 768px) {\n        margin-bottom: 3em;\n        h1 {\n            font-size: 24px;\n        }\n        p {\n            font-size: 1rem;\n        }\n    }\n    \n`;\n\nfunction Header({setDarkMode, darkMode}) {\n    function handleClick() {\n        setDarkMode(!darkMode)\n    }\n    return (\n        <HeaderStyled>\n            <Wrapper>\n                <div className=\"content\">\n                    <Link to=\"/\">\n                        <h1>Where in the world?</h1>\n                    </Link>\n                    \n                    <div className=\"dark-mode\">\n                        <p onClick={handleClick}>\n                            <span className=\"moon\">\n                                {\n                                \n                                    darkMode ? <i className=\"fas fa-moon\"></i> : <i className=\"far fa-moon\"></i>\n                                }\n                            </span>\n                            Dark Mode\n                        </p>\n                    </div>\n                </div>\n                \n            </Wrapper>\n        </HeaderStyled>\n        \n    )\n}\n\nexport default Header\n","import React from 'react'\nimport styled from 'styled-components';\n\nconst CountrySelectedStyled = styled.div`\n    margin-top: 3em;\n    padding-bottom: 3em;\n    img {\n        width: 100%;\n        margin-bottom: 2px;\n    }\n    .grid {\n        display: grid;\n        grid-row-gap: 1em;\n    }\n    .border-item {\n        padding:  .5em  2em;\n        border-radius: 5px;\n        margin-right: 10px;\n        box-shadow:  0 0 5px rgba(0,0,0,.3);\n        display: inline-flex;\n        margin-bottom: 15px;\n        background: var(--background);\n    }\n    .languages {\n        span {\n            margin-right: 5px;\n            &:after {\n                content: ','\n            }\n            &:last-child {\n                &:after {\n                    display: none;\n                }\n            }\n        }\n    }\n    @media screen and (min-width: 1024px) {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        grid-column-gap: 120px;\n        .grid {\n            grid-template-columns: 1fr 1fr;\n        }\n        .borders {\n            display: inline-flex;\n            margin-right: 1em;\n            margin-top: 5em;\n        }\n    }\n`\nfunction CountrySelected({ \n    flag,\n    name,\n    nativeName,\n    population,\n    region,\n    subregion,\n    capital,\n    topLevelDomain,\n    currencies = [],\n    languages = [],\n    borders = []\n}) {\n    return (\n        <CountrySelectedStyled>\n            <img src={flag} alt=\"\"/>\n            <div>\n                <h2>{name}</h2>\n                <div className=\"grid\">\n                    <div>\n                        <p><strong>Native Name:</strong>{nativeName}</p>\n                        <p><strong>Population:</strong> {population} </p>\n                        <p><strong>Region:</strong> {region} </p>\n                        <p><strong>Sub Region:</strong> {subregion}</p>\n                    </div>    \n                    <div>\n                        <p><strong>Capital:</strong> {capital}</p>\n                        <p><strong>Top Level Domain:</strong> {topLevelDomain}</p>\n                        <p><strong>Currencies:</strong> { currencies.map((item, id) => <span key={id}>>{item.name}</span>)} </p>\n                    </div>\n                    \n                </div>\n                <p className=\"languages\"><strong>Languages:</strong> { languages.map((item, id) => <span key={id}>{item.name}</span>)} </p>\n                <p className=\"borders\"><strong>Borders:</strong></p>\n                { borders.map((item, id) => <span className=\"border-item\" key={id}>{item}</span>)} \n            </div>\n        </CountrySelectedStyled>\n    )\n}\n\nexport default CountrySelected\n","import React, {useEffect, useState} from 'react'\nimport styled from 'styled-components';\nimport Wrapper from './Wrapper'\nimport { useSelector } from 'react-redux';\nimport CountrySelected from './CountrySelected';\n\nconst CountryPageStyled = styled.div`\n    .back {\n        background: var(--white);\n        box-shadow: 0 0 5px rgba(0,0,0,.3);\n        padding: .7em 2.2em;\n        border-radius: 5px;\n        border: none;\n        cursor: pointer;\n        margin-top: 1em;\n        color: var(--black);\n        i {\n            margin-right: 5px;\n        }\n    }\n\n    @media screen and (min-width: 1024px) {\n        .back {\n            margin-top: 3em;\n        }\n    }\n`;\n\nfunction CountryPage({ match, history }) {\n    let dbCountry = useSelector(state =>  state.countryList.find(item => item.alpha2Code.toLowerCase() === match.params.id))\n    const [country, setCountry] = useState(dbCountry)\n    useEffect(() => {\n        if(!country) {\n            fetch(`https://restcountries.eu/rest/v2/alpha/${match.params.id}`)\n                .then(res => res.json())\n                .then(data => {\n                    console.log(data)\n                    setCountry(data);\n                })\n        }\n    }, [country, match.params.id])\n \n    function handleClick() {\n        history.goBack()\n    }\n    return (\n        <Wrapper>\n            <CountryPageStyled>\n                <button className=\"back\" onClick={handleClick}><i className=\"fas fa-long-arrow-alt-left\"></i> Back</button>\n                <CountrySelected  {...country}/>\n            </CountryPageStyled>\n        </Wrapper>\n    )\n}\n\nexport default CountryPage\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport CountryList from './CountryList'\nimport ActionList from './ActionList';\nimport reducer from './reducer'\nimport Header from './Header'\nimport CountryPage from './CountryPage'\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom';\n\nconst initialState ={\n  countryList: [],\n  countryListByName: [],\n  countryListByRegion: [],\n  inputValue: ''\n}\n\n\nconst store = createStore(reducer, initialState);\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false)\n  const [checked, setChecked] = useState(false)\n  const mainClass = darkMode ? 'is-dark-mode' : 'is-light-mode'\n\n  function changeMedia(mq) {\n    setDarkMode(mq.matches)\n    setChecked(mq.matches)\n  }\n\n  useEffect(() => {\n    const mq = window.matchMedia('(prefers-color-scheme: dark)')\n    mq.addListener(changeMedia)\n    setDarkMode(mq.matches)\n    // setChecked(mq.matches)\n    return () => {\n      mq.removeListener(changeMedia)\n    }\n  }, [])\n  return (\n    <main className={mainClass}>\n      \n      <Provider store={store}>\n        <Router>\n            <Header setDarkMode={setDarkMode}  darkMode={darkMode} />\n            <Switch>\n            <Route path=\"/country/:id\" component={CountryPage} />\n            <Route path=\"/\">\n              <ActionList />\n              <CountryList/>\n            </Route>\n          </Switch>\n        </Router>\n      </Provider>\n    </main>\n  );\n}\n\nexport default App;\n","    export default function reducer(state, action) {\n    console.log(action, state)\n    switch(action.type){\n      case  'SET_COUNTRY_LIST': {\n        return {...state, countryList: action.payload }\n      }\n      case 'SET_COUNTRY_LIST_BY_NAME': {\n        let list\n        if (state.countryListByRegion.length > 0) {\n          list = state.countryListByRegion\n        } else {\n          list = state.countryList\n        }\n  \n        const countryListByName = list.filter(country => {\n          return country.name.toLowerCase().includes(action.payload.name.toLowerCase()) \n        })\n        return {\n          ...state,\n          countryListByName\n        }\n      \n      }\n      case  'SET_COUNTRY_REGION': {\n      const countryListByRegion = state.countryList.filter(country => {\n        return country.region.toLowerCase() === action.payload.region.toLowerCase() \n      })\n        return {\n          ...state,\n          countryListByRegion\n        }\n      }\n      default: {\n        return state\n      }\n    }\n    // return state;\n  \n  }\n  \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}